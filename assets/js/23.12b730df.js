(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{523:function(t,a,s){t.exports=s.p+"assets/img/banner.b93b9c6b.png"},556:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",[t._v("我们知道，解决同一个问题，可能会有不同的算法，这些算法最终结果也许是一样的，但是在计算过程中占用的内存空间和计算的时间却会有不同的区别，而这两个维度「时间」和「空间」就是衡量一个算法优劣的标准。")]),t._v(" "),n("ul",[n("li",[t._v("时间维度：指执行当前算法所消耗的时间，通常用「时间复杂度」来描述")]),t._v(" "),n("li",[t._v("空间维度：指执行当前算法占用的内存空间，通常用「空间复杂度」来描述\n因此，评价一个算法的效率主要看它的时间复杂度和空间复杂度，很多时候优秀的算法跟其他解决同一个问题的其他算法相比，在时间或空间都能得到明显的降低。")])])]),t._v(" "),n("p",[n("img",{attrs:{src:s(523),alt:"",title:"cover"}})]),t._v(" "),n("h2",{attrs:{id:"时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),n("p",[t._v("时间复杂度是我们理论上讨论一个算法的耗时，这样就可以不受环境的影响，用一种通用的方法："),n("strong",[t._v("大O符号表示法")]),t._v("，即T(n) = O(f(n))。")]),t._v(" "),n("p",[t._v("先来看个例子")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行了n次")]),t._v("\n  a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行了n次")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("在"),n("strong",[t._v("大O表示法中")]),t._v("，f(n)表示每行代码执行次数之和，O表示正比例关系，这个公式的全称是: 算法的渐进时间复杂度。意思是当n趋于无穷大的时候，如果T(n)/f(n)的极限值是一个不为零的常数，那么f(n)就是T(n)的同数量级函数。")]),t._v(" "),n("p",[t._v("我们看回这个例子，假设每一行代码的执行时间都是一样的，用t表示，第一行代码执行了n次，第二行代码执行了n次，即f(n) = (2 * n)，T(n) = (2 * n) * t，可以看出这个算法的耗时是随着n的变化不断变化的，这里我们根据下面的规则简化一下这个公式：")]),t._v(" "),n("ul",[n("li",[t._v("用常数1取代运行时间中的所有加法常数")]),t._v(" "),n("li",[t._v("只保留最高阶项")]),t._v(" "),n("li",[t._v("去除最高阶的常数")])]),t._v(" "),n("p",[t._v("经过简化，T(n) = O(n)，就是上述例子的时间复杂度为O(n)，为什么可以这样简化呢？是因为大O表示法并不是用于真实的代表算法的执行时间，它是表示代码执行时间的增长变化趋势的。如果n趋于无穷大，T(n) = (2 * n) * t的倍数2意义不大，可以简化为T(n) = O(n)表示即可。")]),t._v(" "),n("h3",{attrs:{id:"常见的时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见的时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见的时间复杂度")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("描述")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("增长的数量级")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("表示")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("常数阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("对数阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("logN")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(logN)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("线性阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("线性对数阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("nlogN")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(nlogN)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("平方阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(n^2)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("立方阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("n^3")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(n^3)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("k次方阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("n^k")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(n^k)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("指数阶")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("2^n")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("O(2^n)")])])])]),t._v(" "),n("p",[t._v("从上到下的时间复杂度越来越大，执行的效率越来越低")]),t._v(" "),n("h4",{attrs:{id:"常数阶o-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常数阶o-1","aria-hidden":"true"}},[t._v("#")]),t._v(" 常数阶O(1)")]),t._v(" "),n("p",[t._v("典型的代码：")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("这类型代码无论执行了多少行，只要没有循环等复杂结构，那么这个代码的时间复杂度就是O(1)")]),t._v(" "),n("h4",{attrs:{id:"线性阶o-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线性阶o-n","aria-hidden":"true"}},[t._v("#")]),t._v(" 线性阶O(n)")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("正如前面的分析，这类代码的时间复杂度O(n)")]),t._v(" "),n("h4",{attrs:{id:"对数阶o-logn"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对数阶o-logn","aria-hidden":"true"}},[t._v("#")]),t._v(" 对数阶O(logn)")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("从上面代码可以看到，在while循环里，每次都将a乘于2，假设这个循环体执行了x次，那么2 ^ x = n，x = log"),n("sub",[t._v("2")]),n("sup",[t._v("n")]),t._v("，去除常数简化后为，O(logn)")]),t._v(" "),n("h4",{attrs:{id:"线性对数阶o-nlogn"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线性对数阶o-nlogn","aria-hidden":"true"}},[t._v("#")]),t._v(" 线性对数阶O(nlogn)")]),t._v(" "),n("p",[t._v("将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂就是n*O(logn), 也就是O(nlogn)")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h4",{attrs:{id:"平方阶o-n-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#平方阶o-n-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 平方阶O(n^2)")]),t._v(" "),n("p",[t._v("把O(n)的代码在嵌套循环一次，那么它的时间复杂度就是O(n^2)")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("这个代码嵌套了2层n循环，它的时间复杂度就是O(n^2)， 如果把外层循环的n改为m，即")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("那么时间复杂度就变为O(m * n)\n立方阶和k次方阶也是以此类推。")]),t._v(" "),n("h2",{attrs:{id:"空间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),n("p",[t._v("空间复杂度表示一个算法在运行过程中临时占用存储空间大小的一个量度，用S(n)表示")]),t._v(" "),n("h3",{attrs:{id:"空间复杂度o-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度o-1","aria-hidden":"true"}},[t._v("#")]),t._v(" 空间复杂度O(1)")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("代码中a, b, c所分配的空间不随处理数据量的变化而变化，空间复杂度S(n)=O(1)")]),t._v(" "),n("h3",{attrs:{id:"空间复杂度o-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度o-n","aria-hidden":"true"}},[t._v("#")]),t._v(" 空间复杂度O(n)")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("这里新生成了一个数组，占用大小为n，即S(n)=O(n)")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("本文对几种常见的时间复杂度和空间复杂度进行基础分析，衡量一个算法的优劣要结合时间复杂度和空间复杂度来衡量，有些算法会牺牲空间换时间，这里就看怎么去找到一个平衡点使得算法效率高且优雅了。")]),t._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/50479555",target:"_blank",rel:"noopener noreferrer"}},[t._v("算法的时间与空间复杂度（一看就懂）"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://www.zhihu.com/question/21387264",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何理解算法时间复杂度的表示法O(n²)、O(n)、O(1)、O(nlogn)等？"),n("OutboundLink")],1)])])},[],!1,null,null,null);a.default=e.exports}}]);